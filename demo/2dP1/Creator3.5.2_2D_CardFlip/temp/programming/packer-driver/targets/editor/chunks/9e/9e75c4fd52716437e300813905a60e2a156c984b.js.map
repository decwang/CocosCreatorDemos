{"version":3,"sources":["file:///Users/mu/Desktop/Creator3.5.2_2D_CardFlip/assets/scripts/PopupManager.ts"],"names":["PopupParamsType","PopupRequestType","PopupManager","PopupBase","CacheMode","ShowResultType","mode","Normal","priority","immediately","path","options","params","popup","node","prefabCache","_prefabCache","nodeCache","_nodeCache","current","_current","queue","_queue","suspended","_suspended","container","_container","cc","Canvas","instance","value","show","Promise","res","parseParams","locked","suspend","push","Waiting","getNodeFromCache","isValid","loadStartCallback","prefab","load","loadFinishCallback","warn","Failed","instantiate","getComponent","setParent","setSiblingIndex","macro","MAX_ZINDEX","finishCallback","length","recycle","Done","_res","scheduleOnce","interval","next","hide","has","get","delete","addRef","request","shift","sort","a","b","onSuspended","Once","destroy","release","Frequent","removeFromParent","set","prefabMap","resources","error","refCount","decRef","undefined","Object","prototype","toString","call","Map"],"mappings":";;;yCA8CMA,e,EAKAC,gB,EAQeC,Y;;;;;;;;;;;;;;AAxBdC,MAAAA,S;;;;;;;iBACFC,S;AAAAA,QAAAA,S,CAAAA,S;AAAAA,QAAAA,S,CAAAA,S;AAAAA,QAAAA,S,CAAAA,S;SAAAA,S,KAAAA,S;;iBAKAC,c;AAAAA,QAAAA,c,CAAAA,c;AAAAA,QAAAA,c,CAAAA,c;AAAAA,QAAAA,c,CAAAA,c;SAAAA,c,KAAAA,c;;AAKCL,MAAAA,e,GAAN,MAAMA,eAAN,CAAsB;AAAA;AAAA,eAClBM,IADkB,GACCF,SAAS,CAACG,MADX;AAAA,eAElBC,QAFkB,GAEE,CAFF;AAAA,eAGlBC,WAHkB,GAGM,KAHN;AAAA;;AAAA,O;AAKhBR,MAAAA,gB,GAAN,MAAMA,gBAAN,CAAuB;AAAA;AAAA,eACnBS,IADmB;AAAA,eAEnBC,OAFmB;AAAA,eAGnBC,MAHmB;AAAA,eAInBC,KAJmB;AAAA,eAKnBC,IALmB;AAAA;;AAAA,O;;yBAQFZ,Y,GAAN,MAAMA,YAAN,CAAmB;AAClC;AACA;AACA;AACiC,mBAAXa,WAAW,GAAG;AAC5B,iBAAO,KAAKC,YAAZ;AACH;;AAEL;AACA;AACA;AAC+B,mBAATC,SAAS,GAAG;AAC1B,iBAAO,KAAKC,UAAZ;AACH;;AAEL;AACA;AACA;AAC6B,mBAAPC,OAAO,GAAG;AACxB,iBAAO,KAAKC,QAAZ;AACH;;AAEL;AACA;AACA;AAC2B,mBAALC,KAAK,GAAG;AACtB,iBAAO,KAAKC,MAAZ;AACH;;AAEL;AACA;AACA;AAC+B,mBAATC,SAAS,GAAG;AAC1B,iBAAO,KAAKC,UAAZ;AACH;;AAML;AACA;AACA;AAC+B,mBAATC,SAAS,GAAG;AAC1B,iBAAO,KAAKC,UAAL,IAAmBC,EAAE,CAACC,MAAH,CAAUC,QAAV,CAAmBf,IAA7C;AACH;;AAC0B,mBAATW,SAAS,CAACK,KAAD,EAAQ;AAC/B,eAAKJ,UAAL,GAAkBI,KAAlB;AACH;;AAML;AACA;AACA;AAC+B,mBAAT1B,SAAS,GAAG;AAC1B,iBAAOA,SAAP;AACH,SA3D6B,CA4DlC;AACA;AACA;;;AACoC,mBAAdC,cAAc,GAAG;AAC/B,iBAAOA,cAAP;AACH,SAjE6B,CAkElC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB,eAAJ0B,IAAI,CAAUrB,IAAV,EAAwBC,OAAxB,EAA2CC,MAA3C,EAA8F;AAC5G,iBAAO,IAAIoB,OAAJ,CAAY,MAAMC,GAAN,IAAa;AACxC;AACQrB,YAAAA,MAAM,GAAG,KAAKsB,WAAL,CAAiBtB,MAAjB,CAAT,CAFgC,CAGxC;;AACQ,gBAAI,KAAKQ,QAAL,IAAiB,KAAKe,MAA1B,EAAkC;AAC1C;AACQ,kBAAIvB,MAAM,IAAIA,MAAM,CAACH,WAArB,EAAkC;AAClC,qBAAK0B,MAAL,GAAc,KAAd,CADkC,CAE1C;;AACQ,sBAAM,KAAKC,OAAL,EAAN;AACC,eAJD,MAIO;AACf;AACQ,qBAAKC,IAAL,CAAU3B,IAAV,EAAgBC,OAAhB,EAAyBC,MAAzB;AACAqB,gBAAAA,GAAG,CAAC5B,cAAc,CAACiC,OAAhB,CAAH;AACA;AACC;AACA,aAhB+B,CAiBxC;;;AACQ,iBAAKlB,QAAL,GAAgB;AAAEV,cAAAA,IAAF;AAAQC,cAAAA,OAAR;AAAiBC,cAAAA;AAAjB,aAAhB,CAlBgC,CAmBxC;;AACQ,gBAAIE,IAAI,GAAG,KAAKyB,gBAAL,CAAsB7B,IAAtB,CAAX,CApBgC,CAqBxC;;AACQ,gBAAI,CAACiB,EAAE,CAACa,OAAH,CAAW1B,IAAX,CAAL,EAAuB;AAC/B;AACQ,mBAAK2B,iBAAL,IAA0B,KAAKA,iBAAL,EAA1B,CAFuB,CAG/B;;AACQ,oBAAMC,MAAM,GAAG,MAAM,KAAKC,IAAL,CAAUjC,IAAV,CAArB,CAJuB,CAK/B;;AACQ,mBAAKkC,kBAAL,IAA2B,KAAKA,kBAAL,EAA3B,CANuB,CAO/B;;AACQ,kBAAI,CAACjB,EAAE,CAACa,OAAH,CAAWE,MAAX,CAAL,EAAyB;AACzBf,gBAAAA,EAAE,CAACkB,IAAH,CAAQ,gBAAR,EAA0B,QAA1B,EAAoCnC,IAApC;AACA,qBAAKU,QAAL,GAAgB,IAAhB;AACAa,gBAAAA,GAAG,CAAC5B,cAAc,CAACyC,MAAhB,CAAH;AACA;AACC,eAbsB,CAc/B;;;AACQhC,cAAAA,IAAI,GAAGa,EAAE,CAACoB,WAAH,CAAeL,MAAf,CAAP;AACC,aAtC+B,CAuCxC;;;AACQ,kBAAM7B,KAAK,GAAGC,IAAI,CAACkC,YAAL;AAAA;AAAA,uCAAd;;AACA,gBAAI,CAACnC,KAAL,EAAY;AACZc,cAAAA,EAAE,CAACkB,IAAH,CAAQ,gBAAR,EAA0B,SAA1B,EAAqCnC,IAArC;AACA,mBAAKU,QAAL,GAAgB,IAAhB;AACAa,cAAAA,GAAG,CAAC5B,cAAc,CAACyC,MAAhB,CAAH;AACA;AACC,aA9C+B,CA+CxC;;;AACQ,iBAAK1B,QAAL,CAAcP,KAAd,GAAsBA,KAAtB,CAhDgC,CAiDxC;;AACQ,iBAAKO,QAAL,CAAcN,IAAd,GAAqBA,IAArB,CAlDgC,CAmDxC;;AACQA,YAAAA,IAAI,CAACmC,SAAL,CAAe,KAAKxB,SAApB,EApDgC,CAqDxC;;AACQX,YAAAA,IAAI,CAACoC,eAAL,CAAqBvB,EAAE,CAACwB,KAAH,CAASC,UAA9B,EAtDgC,CAuDxC;AACA;;AACQvC,YAAAA,KAAK,CAACwC,cAAN,GAAuB,MAAO9B,SAAP,IAA8B;AACrD,kBAAIA,SAAJ,EAAe;AACf;AACC,eAHoD,CAI7D;;;AACQ,mBAAKY,MAAL,GAAe,KAAKX,UAAL,CAAgB8B,MAAhB,GAAyB,CAAzB,IAA8B,KAAKhC,MAAL,CAAYgC,MAAZ,GAAqB,CAAlE,CALqD,CAM7D;;AACQ,mBAAKC,OAAL,CAAa7C,IAAb,EAAmBI,IAAnB,EAAyBF,MAAM,CAACN,IAAhC;AACA,mBAAKc,QAAL,GAAgB,IAAhB;AACAa,cAAAA,GAAG,CAAC5B,cAAc,CAACmD,IAAhB,CAAH,CATqD,CAU7D;;AACQ,oBAAM,IAAIxB,OAAJ,CAAYyB,IAAI,IAAI;AAC1B9B,gBAAAA,EAAE,CAACC,MAAH,CAAUC,QAAV,CAAmB6B,YAAnB,CAAgCD,IAAhC,EAAsC,KAAKE,QAA3C;AACC,eAFK,CAAN,CAXqD,CAc7D;;AACQ,mBAAKC,IAAL;AACC,aAhBD,CAzDgC,CA0ExC;;;AACQ/C,YAAAA,KAAK,CAACkB,IAAN,CAAWpB,OAAX;AACC,WA5EM,CAAP;AA6EH,SA/K6B,CAgLlC;AACA;AACA;;;AACsB,eAAJkD,IAAI,GAAG;AACjB,cAAIlC,EAAE,CAACa,OAAH,CAAW,KAAKpB,QAAL,CAAcP,KAAzB,CAAJ,EAAqC;AACrC,iBAAKO,QAAL,CAAcP,KAAd,CAAoBgD,IAApB;AACC;AACJ,SAvL6B,CAwLlC;AACA;AACA;AACA;;;AACmC,eAAhBtB,gBAAgB,CAAC7B,IAAD,EAAqB;AACxD;AACQ,gBAAMO,SAAS,GAAG,KAAKC,UAAvB;;AACA,cAAID,SAAS,CAAC6C,GAAV,CAAcpD,IAAd,CAAJ,EAAyB;AACzB,kBAAMI,IAAI,GAAGG,SAAS,CAAC8C,GAAV,CAAcrD,IAAd,CAAb;;AACA,gBAAIiB,EAAE,CAACa,OAAH,CAAW1B,IAAX,CAAJ,EAAsB;AACtB,qBAAOA,IAAP;AACC,aAJwB,CAKjC;;;AACQG,YAAAA,SAAS,CAAC+C,MAAV,CAAiBtD,IAAjB;AACC,WAV+C,CAWxD;;;AACQ,gBAAMK,WAAW,GAAG,KAAKC,YAAzB;;AACA,cAAID,WAAW,CAAC+C,GAAZ,CAAgBpD,IAAhB,CAAJ,EAA2B;AAC3B,kBAAMgC,MAAM,GAAG3B,WAAW,CAACgD,GAAZ,CAAgBrD,IAAhB,CAAf;;AACA,gBAAIiB,EAAE,CAACa,OAAH,CAAWE,MAAX,CAAJ,EAAwB;AAChC;AACQA,cAAAA,MAAM,CAACuB,MAAP,GAFwB,CAGhC;;AACQ,qBAAOtC,EAAE,CAACoB,WAAH,CAAeL,MAAf,CAAP;AACC,aAP0B,CAQnC;;;AACQ3B,YAAAA,WAAW,CAACiD,MAAZ,CAAmBtD,IAAnB;AACC,WAvB+C,CAwBxD;;;AACQ,iBAAO,IAAP;AACH,SAtN6B,CAuNlC;AACA;AACA;;;AACuB,eAAJkD,IAAI,GAAG;AAClB,cAAI,KAAKxC,QAAL,IAAkB,KAAKI,UAAL,CAAgB8B,MAAhB,KAA2B,CAA3B,IAAgC,KAAKhC,MAAL,CAAYgC,MAAZ,KAAuB,CAA7E,EAAiF;AACjF;AACC,WAHiB,CAI1B;;;AACQ,cAAIY,OAAyB,GAAG,IAAhC;;AACA,cAAI,KAAK1C,UAAL,CAAgB8B,MAAhB,GAAyB,CAA7B,EAAgC;AACxC;AACQY,YAAAA,OAAO,GAAG,KAAK1C,UAAL,CAAgB2C,KAAhB,EAAV;AACC,WAHD,MAGO;AACf;AACQD,YAAAA,OAAO,GAAG,KAAK5C,MAAL,CAAY6C,KAAZ,EAAV;AACC,WAZiB,CAa1B;;;AACQ,eAAKhC,MAAL,GAAc,KAAd,CAdkB,CAe1B;;AACQ,cAAIR,EAAE,CAACa,OAAH,CAAW0B,OAAO,CAACrD,KAAnB,CAAJ,EAA+B;AACvC;AACQ,iBAAKO,QAAL,GAAgB8C,OAAhB,CAF+B,CAGvC;;AACQA,YAAAA,OAAO,CAACpD,IAAR,CAAamC,SAAb,CAAuB,KAAKxB,SAA5B;AACAyC,YAAAA,OAAO,CAACrD,KAAR,CAAckB,IAAd,CAAmBmC,OAAO,CAACvD,OAA3B;AACA;AACC,WAvBiB,CAwB1B;;;AACQ,eAAKoB,IAAL,CAAUmC,OAAO,CAACxD,IAAlB,EAAwBwD,OAAO,CAACvD,OAAhC,EAAyCuD,OAAO,CAACtD,MAAjD;AACH,SApP6B,CAqPlC;AACA;AACA;AACA;AACA;AACA;;;AACuB,eAAJyB,IAAI,CAAU3B,IAAV,EAAwBC,OAAxB,EAA2CC,MAA3C,EAAqE;AAC5F;AACQ,cAAI,CAAC,KAAKQ,QAAN,IAAkB,CAAC,KAAKe,MAA5B,EAAoC;AACpC,iBAAKJ,IAAL,CAAUrB,IAAV,EAAgBC,OAAhB,EAAyBC,MAAzB;AACA;AACC,WALmF,CAM5F;;;AACQ,eAAKU,MAAL,CAAYe,IAAZ,CAAiB;AAAE3B,YAAAA,IAAF;AAAQC,YAAAA,OAAR;AAAiBC,YAAAA;AAAjB,WAAjB,EAPoF,CAQ5F;;;AACQ,eAAKU,MAAL,CAAY8C,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACzD,MAAF,CAASJ,QAAT,GAAoB8D,CAAC,CAAC1D,MAAF,CAASJ,QAAzD;AACH,SArQ6B,CAsQlC;AACA;AACA;;;AACgC,qBAAP4B,OAAO,GAAG;AAC3B,cAAI,CAAC,KAAKhB,QAAV,EAAoB;AACpB;AACC;;AACD,gBAAM8C,OAAO,GAAG,KAAK9C,QAArB,CAJ2B,CAKnC;;AACQ,eAAKI,UAAL,CAAgBa,IAAhB,CAAqB6B,OAArB,EAN2B,CAOnC;;;AACQ,gBAAMA,OAAO,CAACrD,KAAR,CAAc0D,WAAd,EAAN,CAR2B,CASnC;;AACQ,gBAAML,OAAO,CAACrD,KAAR,CAAcgD,IAAd,CAAmB,IAAnB,CAAN,CAV2B,CAWnC;;AACQ,eAAKzC,QAAL,GAAgB,IAAhB;AACH,SAtR6B,CAuRlC;AACA;AACA;AACA;AACA;AACA;;;AAC0B,eAAPmC,OAAO,CAAC7C,IAAD,EAAeI,IAAf,EAA2BR,IAA3B,EAA4C;AAC9D,kBAAQA,IAAR;AACR;AACQ,iBAAKF,SAAS,CAACoE,IAAf;AAAqB;AACrB,qBAAKtD,UAAL,CAAgB8C,MAAhB,CAAuBtD,IAAvB;;AACAI,gBAAAA,IAAI,CAAC2D,OAAL,GAFqB,CAG7B;;AACQ,qBAAKC,OAAL,CAAahE,IAAb;AACA;AACC;AACT;;AACQ,iBAAKN,SAAS,CAACG,MAAf;AAAuB;AACvB,qBAAKW,UAAL,CAAgB8C,MAAhB,CAAuBtD,IAAvB;;AACAI,gBAAAA,IAAI,CAAC2D,OAAL;AACA;AACC;AACT;;AACQ,iBAAKrE,SAAS,CAACuE,QAAf;AAAyB;AACzB7D,gBAAAA,IAAI,CAAC8D,gBAAL,CAAsB,KAAtB;;AACA,qBAAK1D,UAAL,CAAgB2D,GAAhB,CAAoBnE,IAApB,EAA0BI,IAA1B;;AACA;AACC;AApBD;AAsBH,SApT6B,CAqTlC;AACA;AACA;AACA;;;AACsB,eAAJ6B,IAAI,CAACjC,IAAD,EAAgC;AAC9C,iBAAO,IAAIsB,OAAJ,CAAYC,GAAG,IAAI;AAC1B,kBAAM6C,SAAS,GAAG,KAAK9D,YAAvB,CAD0B,CAElC;;AACQ,gBAAI8D,SAAS,CAAChB,GAAV,CAAcpD,IAAd,CAAJ,EAAyB;AACzB,oBAAMgC,MAAM,GAAGoC,SAAS,CAACf,GAAV,CAAcrD,IAAd,CAAf,CADyB,CAEjC;;AACQ,kBAAIiB,EAAE,CAACa,OAAH,CAAWE,MAAX,CAAJ,EAAwB;AACxBT,gBAAAA,GAAG,CAACS,MAAD,CAAH;AACA;AACC,eAHD,MAGO;AACf;AACQoC,gBAAAA,SAAS,CAACd,MAAV,CAAiBtD,IAAjB;AACC;AACA,aAbyB,CAclC;;;AACQiB,YAAAA,EAAE,CAACoD,SAAH,CAAapC,IAAb,CAAkBjC,IAAlB,EAAwB,CAACsE,KAAD,EAAetC,MAAf,KAAqC;AAC7D,kBAAIsC,KAAJ,EAAW;AACX/C,gBAAAA,GAAG,CAAC,IAAD,CAAH;AACA;AACC,eAJ4D,CAKrE;;;AACQ6C,cAAAA,SAAS,CAACD,GAAV,CAAcnE,IAAd,EAAoBgC,MAApB,EAN6D,CAOrE;;AACQT,cAAAA,GAAG,CAACS,MAAD,CAAH;AACC,aATD;AAUC,WAzBM,CAAP;AA0BH,SApV6B,CAqVlC;AACA;AACA;AACA;;;AACyB,eAAPgC,OAAO,CAAChE,IAAD,EAAe;AACxC;AACQ,gBAAMO,SAAS,GAAG,KAAKC,UAAvB;AACA,cAAIJ,IAAI,GAAGG,SAAS,CAAC8C,GAAV,CAAcrD,IAAd,CAAX;;AACA,cAAII,IAAJ,EAAU;AACVG,YAAAA,SAAS,CAAC+C,MAAV,CAAiBtD,IAAjB;;AACA,gBAAIiB,EAAE,CAACa,OAAH,CAAW1B,IAAX,CAAJ,EAAsB;AACtBA,cAAAA,IAAI,CAAC2D,OAAL;AACC;;AACD3D,YAAAA,IAAI,GAAG,IAAP;AACC,WAV+B,CAWxC;;;AACQ,gBAAMC,WAAW,GAAG,KAAKC,YAAzB;AACA,cAAI0B,MAAM,GAAG3B,WAAW,CAACgD,GAAZ,CAAgBrD,IAAhB,CAAb;;AACA,cAAIgC,MAAJ,EAAY;AACpB;AACQ,gBAAIA,MAAM,CAACuC,QAAP,IAAmB,CAAvB,EAA0B;AAC1BlE,cAAAA,WAAW,CAACiD,MAAZ,CAAmBtD,IAAnB;AACC,aAJW,CAKpB;;;AACQgC,YAAAA,MAAM,CAACwC,MAAP;AACAxC,YAAAA,MAAM,GAAG,IAAT;AACC;AACJ,SAhX6B,CAiXlC;AACA;AACA;AACA;;;AAC8B,eAAXR,WAAW,CAACtB,MAAD,EAA0B;AAChD,cAAIA,MAAM,IAAIuE,SAAd,EAAyB;AACzB,mBAAO,IAAInF,eAAJ,EAAP;AACC,WAH+C,CAIxD;;;AACQ,cAAIoF,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+B3E,MAA/B,MAA2C,iBAA/C,EAAkE;AAClEe,YAAAA,EAAE,CAACkB,IAAH,CAAQ,gBAAR,EAA0B,eAA1B;AACA,mBAAO,IAAI7C,eAAJ,EAAP;AACC,WAR+C,CASxD;;;AACQ,cAAIY,MAAM,CAACN,IAAP,IAAe6E,SAAnB,EAA8B;AAC9BvE,YAAAA,MAAM,CAACN,IAAP,GAAcF,SAAS,CAACG,MAAxB;AACC,WAZ+C,CAaxD;;;AACQ,cAAIK,MAAM,CAACJ,QAAP,IAAmB2E,SAAvB,EAAkC;AAClCvE,YAAAA,MAAM,CAACJ,QAAP,GAAkB,CAAlB;AACC,WAhB+C,CAiBxD;;;AACQ,cAAII,MAAM,CAACH,WAAP,IAAsB0E,SAA1B,EAAqC;AACrCvE,YAAAA,MAAM,CAACH,WAAP,GAAqB,KAArB;AACC;;AACD,iBAAOG,MAAP;AACH;;AA3Y6B,O;AA+Yll3BqBV,MAAAA,Y,CAOFc,Y,GAAoC,IAAIwE,GAAJ,E;AAPlCtF,MAAAA,Y,CAcFgB,U,GAAgC,IAAIsE,GAAJ,E;AAd9BtF,MAAAA,Y,CAqBFkB,Q,GAA6B,I;AArB3BlB,MAAAA,Y,CA4BFoB,M,GAA6B,E;AA5B3BpB,MAAAA,Y,CAmCFsB,U,GAAiC,E;AAnC/BtB,MAAAA,Y,CAuCFiC,M,GAAkB,K;AAvChBjC,MAAAA,Y,CAiDHwB,U,GAA0B,I;AAjDvBxB,MAAAA,Y,CAqDHyD,Q,GAAmB,I;AArDhBzD,MAAAA,Y,CAyEHuC,iB,GAAgC,I;AAzE7BvC,MAAAA,Y,CAiFH0C,kB,GAAiC,I","sourcesContent":["// /**\n// * 弹窗缓存模式\n// */\n// /** 一次性的（立即销毁节点，预制体资源随即释放） */\n// /** 正常的（立即销毁节点，但是缓存预制体资源） */\n// /** 频繁的（只关闭节点，且缓存预制体资源） */\n// /**\n// * 弹窗请求结果类型\n// */\n// /** 展示成功（已关闭） */\n// /** 展示失败（加载失败） */\n// /** 等待中（已加入等待队列） */\n// /**\n// * 弹窗管理器\n// * @author 陈皮皮 (ifaswind)\n// * @version 20220121\n// * @see PopupManager.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/core/PopupManager.ts\n// * @see PopupBase.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/components/popups/PopupBase.ts\n// */\n// /**\n// * 弹窗展示参数类型\n// */\n// /** 缓存模式 */\n// /** 优先级（优先级大的优先展示） */\n// /** 立刻展示（将会挂起当前展示中的弹窗） */\n// /**\n// * 弹窗展示请求类型\n// */\n// /** 弹窗预制体相对路径 */\n// /** 弹窗选项 */\n// /** 缓存模式 */\n// /** 弹窗组件 */\n// /** 弹窗节点 */\n\nimport { _decorator, Prefab, Node } from 'cc';\nimport PopupBase from \"../components/popups/PopupBase\";\nenum CacheMode {\n    Once = 1,\n    Normal,\n    Frequent\n}\nenum ShowResultType {\n    Done = 1,\n    Failed,\n    Waiting\n}\nclass PopupParamsType {\n    mode?: CacheMode = CacheMode.Normal;\n    priority?: number = 0;\n    immediately?: boolean = false;\n}\nclass PopupRequestType {\n    path: string;\n    options: any;\n    params: PopupParamsType;\n    popup?: PopupBase;\n    node?: Node;\n}\n\nexport default class PopupManager {\n// /**\n// * 预制体缓存\n// */\n    public static get prefabCache() {\n        return this._prefabCache;\n    }\n    private static _prefabCache: Map<string, Prefab> = new Map<string, Prefab>();\n// /**\n// * 节点缓存\n// */\n    public static get nodeCache() {\n        return this._nodeCache;\n    }\n    private static _nodeCache: Map<string, Node> = new Map<string, Node>();\n// /**\n// * 当前弹窗请求\n// */\n    public static get current() {\n        return this._current;\n    }\n    private static _current: PopupRequestType = null;\n// /**\n// * 等待队列\n// */\n    public static get queue() {\n        return this._queue;\n    }\n    private static _queue: PopupRequestType[] = [];\n// /**\n// * 被挂起的弹窗队列\n// */\n    public static get suspended() {\n        return this._suspended;\n    }\n    private static _suspended: PopupRequestType[] = [];\n// /**\n// * 锁定状态\n// */\n    private static locked: boolean = false;\n// /**\n// * 用于存放弹窗节点的容器节点（不设置则默认为当前 Canvas）\n// */\n    public static get container() {\n        return this._container || cc.Canvas.instance.node;\n    }\n    public static set container(value) {\n        this._container = value;\n    }\n    public static _container: Node | null = null;\n// /**\n// * 连续展示弹窗的时间间隔（秒）\n// */\n    public static interval: number = 0.05;\n// /**\n// * 弹窗缓存模式\n// */\n    public static get CacheMode() {\n        return CacheMode;\n    }\n// /**\n// * 弹窗请求结果类型\n// */\n    public static get ShowResultType() {\n        return ShowResultType;\n    }\n// /**\n// * 弹窗动态加载开始回调\n// * @example\n// * PopupManager.loadStartCallback = () => {\n// *     LoadingTip.show();\n// * };\n// */\n    public static loadStartCallback: () => void = null;\n// /**\n// * 弹窗动态加载结束回调\n// * @example\n// * PopupManager.loadFinishCallback = () => {\n// *     LoadingTip.hide();\n// * };\n// */\n    public static loadFinishCallback: () => void = null;\n// /**\n// * 展示弹窗，如果当前已有弹窗在展示中则加入等待队列\n// * @param path 弹窗预制体相对路径（如：prefabs/MyPopup）\n// * @param options 弹窗选项（将传递给弹窗的组件）\n// * @param params 弹窗展示参数\n// * @example\n// * const options = {\n// *     title: 'Hello',\n// *     content: 'This is a popup!'\n// * };\n// * const params = {\n// *     mode: PopupCacheMode.Normal\n// * };\n// * PopupManager.show('prefabs/MyPopup', options, params);\n// */\n    public static show<Options>(path: string, options?: Options, params?: PopupParamsType): Promise<ShowResultType> {\n        return new Promise(async res => {\n// // 解析处理参数\n        params = this.parseParams(params);\n// // 当前已有弹窗在展示中则加入等待队列\n        if (this._current || this.locked) {\n// // 是否立即强制展示\n        if (params && params.immediately) {\n        this.locked = false;\n// // 挂起当前弹窗\n        await this.suspend();\n        } else {\n// // 将请求推入等待队列\n        this.push(path, options, params);\n        res(ShowResultType.Waiting);\n        return;\n        }\n        }\n// // 保存为当前弹窗，阻止新的弹窗请求\n        this._current = { path, options, params };\n// // 先在缓存中获取弹窗节点\n        let node = this.getNodeFromCache(path);\n// // 缓存中没有，动态加载预制体资源\n        if (!cc.isValid(node)) {\n// // 开始回调\n        this.loadStartCallback && this.loadStartCallback();\n// // 等待加载\n        const prefab = await this.load(path);\n// // 完成回调\n        this.loadFinishCallback && this.loadFinishCallback();\n// // 加载失败（一般是路径错误导致的）\n        if (!cc.isValid(prefab)) {\n        cc.warn('[PopupManager]', '弹窗加载失败', path);\n        this._current = null;\n        res(ShowResultType.Failed);\n        return;\n        }\n// // 实例化节点\n        node = cc.instantiate(prefab);\n        }\n// // 获取继承自 PopupBase 的弹窗组件\n        const popup = node.getComponent(PopupBase);\n        if (!popup) {\n        cc.warn('[PopupManager]', '未找到弹窗组件', path);\n        this._current = null;\n        res(ShowResultType.Failed);\n        return;\n        }\n// // 保存组件引用\n        this._current.popup = popup;\n// // 保存节点引用\n        this._current.node = node;\n// // 添加到场景中\n        node.setParent(this.container);\n// // 显示在最上层\n        node.setSiblingIndex(cc.macro.MAX_ZINDEX);\n// // 设置完成回调\n// // @ts-ignore\n        popup.finishCallback = async (suspended: boolean) => {\n        if (suspended) {\n        return;\n        }\n// // 是否需要锁定\n        this.locked = (this._suspended.length > 0 || this._queue.length > 0);\n// // 回收\n        this.recycle(path, node, params.mode);\n        this._current = null;\n        res(ShowResultType.Done);\n// // 延迟一会儿\n        await new Promise(_res => {\n        cc.Canvas.instance.scheduleOnce(_res, this.interval);\n        });\n// // 下一个弹窗\n        this.next();\n        }\n// // 展示\n        popup.show(options);\n        });\n    }\n// /**\n// * 隐藏当前弹窗\n// */\n    public static hide() {\n        if (cc.isValid(this._current.popup)) {\n        this._current.popup.hide();\n        }\n    }\n// /**\n// * 从缓存中获取节点\n// * @param path 弹窗路径\n// */\n    private static getNodeFromCache(path: string): Node {\n// // 从节点缓存中获取\n        const nodeCache = this._nodeCache;\n        if (nodeCache.has(path)) {\n        const node = nodeCache.get(path);\n        if (cc.isValid(node)) {\n        return node;\n        }\n// // 删除无效引用\n        nodeCache.delete(path);\n        }\n// // 从预制体缓存中获取\n        const prefabCache = this._prefabCache;\n        if (prefabCache.has(path)) {\n        const prefab = prefabCache.get(path);\n        if (cc.isValid(prefab)) {\n// // 增加引用计数\n        prefab.addRef();\n// // 实例化并返回\n        return cc.instantiate(prefab);\n        }\n// // 删除无效引用\n        prefabCache.delete(path);\n        }\n// // 无\n        return null;\n    }\n// /**\n// * 展示挂起或等待队列中的下一个弹窗\n// */\n    private static next() {\n        if (this._current || (this._suspended.length === 0 && this._queue.length === 0)) {\n        return;\n        }\n// // 取出一个请求\n        let request: PopupRequestType = null;\n        if (this._suspended.length > 0) {\n// // 挂起队列\n        request = this._suspended.shift();\n        } else {\n// // 等待队列\n        request = this._queue.shift();\n        }\n// // 解除锁定\n        this.locked = false;\n// // 已有实例\n        if (cc.isValid(request.popup)) {\n// // 设为当前弹窗\n        this._current = request;\n// // 直接展示\n        request.node.setParent(this.container);\n        request.popup.show(request.options);\n        return;\n        }\n// // 加载并展示\n        this.show(request.path, request.options, request.params);\n    }\n// /**\n// * 添加一个弹窗请求到等待队列中，如果当前没有展示中的弹窗则直接展示该弹窗。\n// * @param path 弹窗预制体相对路径（如：prefabs/MyPopup）\n// * @param options 弹窗选项\n// * @param params 弹窗展示参数\n// */\n    private static push<Options>(path: string, options?: Options, params?: PopupParamsType) {\n// // 直接展示\n        if (!this._current && !this.locked) {\n        this.show(path, options, params);\n        return;\n        }\n// // 加入队列\n        this._queue.push({ path, options, params });\n// // 按照优先级从小到大排序\n        this._queue.sort((a, b) => (a.params.priority - b.params.priority));\n    }\n// /**\n// * 挂起当前展示中的弹窗\n// */\n    private static async suspend() {\n        if (!this._current) {\n        return;\n        }\n        const request = this._current;\n// // 将当前弹窗推入挂起队列\n        this._suspended.push(request);\n// // @ts-ignore\n        await request.popup.onSuspended();\n// // 关闭当前弹窗（挂起）\n        await request.popup.hide(true);\n// // 置空当前\n        this._current = null;\n    }\n// /**\n// * 回收弹窗\n// * @param path 弹窗路径\n// * @param node 弹窗节点\n// * @param mode 缓存模式\n// */\n    private static recycle(path: string, node: Node, mode: CacheMode) {\n        switch (mode) {\n// // 一次性\n        case CacheMode.Once: {\n        this._nodeCache.delete(path);\n        node.destroy();\n// // 释放\n        this.release(path);\n        break;\n        }\n// // 正常\n        case CacheMode.Normal: {\n        this._nodeCache.delete(path);\n        node.destroy();\n        break;\n        }\n// // 频繁\n        case CacheMode.Frequent: {\n        node.removeFromParent(false);\n        this._nodeCache.set(path, node);\n        break;\n        }\n        }\n    }\n// /**\n// * 加载并缓存弹窗预制体资源\n// * @param path 弹窗路径\n// */\n    public static load(path: string): Promise<Prefab> {\n        return new Promise(res => {\n        const prefabMap = this._prefabCache;\n// // 先看下缓存里有没有，避免重复加载\n        if (prefabMap.has(path)) {\n        const prefab = prefabMap.get(path);\n// // 缓存是否有效\n        if (cc.isValid(prefab)) {\n        res(prefab);\n        return;\n        } else {\n// // 删除无效引用\n        prefabMap.delete(path);\n        }\n        }\n// // 动态加载\n        cc.resources.load(path, (error: Error, prefab: cc.Prefab) => {\n        if (error) {\n        res(null);\n        return;\n        }\n// // 缓存预制体\n        prefabMap.set(path, prefab);\n// // 返回\n        res(prefab);\n        });\n        });\n    }\n// /**\n// * 尝试释放弹窗资源（注意：弹窗内部动态加载的资源请自行释放）\n// * @param path 弹窗路径\n// */\n    public static release(path: string) {\n// // 移除节点\n        const nodeCache = this._nodeCache;\n        let node = nodeCache.get(path);\n        if (node) {\n        nodeCache.delete(path);\n        if (cc.isValid(node)) {\n        node.destroy();\n        }\n        node = null;\n        }\n// // 移除预制体\n        const prefabCache = this._prefabCache;\n        let prefab = prefabCache.get(path);\n        if (prefab) {\n// // 删除缓存\n        if (prefab.refCount <= 1) {\n        prefabCache.delete(path);\n        }\n// // 减少引用\n        prefab.decRef();\n        prefab = null;\n        }\n    }\n// /**\n// * 解析参数\n// * @param params 参数\n// */\n    private static parseParams(params: PopupParamsType) {\n        if (params == undefined) {\n        return new PopupParamsType();\n        }\n// // 是否为对象\n        if (Object.prototype.toString.call(params) !== '[object Object]') {\n        cc.warn('[PopupManager]', '弹窗参数无效，使用默认参数');\n        return new PopupParamsType();\n        }\n// // 缓存模式\n        if (params.mode == undefined) {\n        params.mode = CacheMode.Normal;\n        }\n// // 优先级\n        if (params.priority == undefined) {\n        params.priority = 0;\n        }\n// // 立刻展示\n        if (params.immediately == undefined) {\n        params.immediately = false;\n        }\n        return params;\n    }\n}\n\n\n/**\n * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换\n */\n// import PopupBase from \"../components/popups/PopupBase\";\n// \n// /**\n//  * 弹窗缓存模式\n//  */\n// enum CacheMode {\n//     /** 一次性的（立即销毁节点，预制体资源随即释放） */\n//     Once = 1,\n//     /** 正常的（立即销毁节点，但是缓存预制体资源） */\n//     Normal,\n//     /** 频繁的（只关闭节点，且缓存预制体资源） */\n//     Frequent\n// }\n// \n// /**\n//  * 弹窗请求结果类型\n//  */\n// enum ShowResultType {\n//     /** 展示成功（已关闭） */\n//     Done = 1,\n//     /** 展示失败（加载失败） */\n//     Failed,\n//     /** 等待中（已加入等待队列） */\n//     Waiting\n// }\n// \n// /**\n//  * 弹窗管理器\n//  * @author 陈皮皮 (ifaswind)\n//  * @version 20220121\n//  * @see PopupManager.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/core/PopupManager.ts\n//  * @see PopupBase.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/components/popups/PopupBase.ts\n//  */\n// export default class PopupManager {\n// \n//     /**\n//      * 预制体缓存\n//      */\n//     public static get prefabCache() {\n//         return this._prefabCache;\n//     }\n//     private static _prefabCache: Map<string, cc.Prefab> = new Map<string, cc.Prefab>();\n// \n//     /**\n//      * 节点缓存\n//      */\n//     public static get nodeCache() {\n//         return this._nodeCache;\n//     }\n//     private static _nodeCache: Map<string, cc.Node> = new Map<string, cc.Node>();\n// \n//     /**\n//      * 当前弹窗请求\n//      */\n//     public static get current() {\n//         return this._current;\n//     }\n//     private static _current: PopupRequestType = null;\n// \n//     /**\n//      * 等待队列\n//      */\n//     public static get queue() {\n//         return this._queue;\n//     }\n//     private static _queue: PopupRequestType[] = [];\n// \n//     /**\n//      * 被挂起的弹窗队列\n//      */\n//     public static get suspended() {\n//         return this._suspended;\n//     }\n//     private static _suspended: PopupRequestType[] = [];\n// \n//     /**\n//      * 锁定状态\n//      */\n//     private static locked: boolean = false;\n// \n//     /**\n//      * 用于存放弹窗节点的容器节点（不设置则默认为当前 Canvas）\n//      */\n//     public static get container() {\n//         return this._container || cc.Canvas.instance.node;\n//     }\n//     public static set container(value) {\n//         this._container = value;\n//     }\n//     public static _container: cc.Node = null;\n// \n//     /**\n//      * 连续展示弹窗的时间间隔（秒）\n//      */\n//     public static interval: number = 0.05;\n// \n//     /**\n//      * 弹窗缓存模式\n//      */\n//     public static get CacheMode() {\n//         return CacheMode;\n//     }\n// \n//     /**\n//      * 弹窗请求结果类型\n//      */\n//     public static get ShowResultType() {\n//         return ShowResultType;\n//     }\n// \n//     /**\n//      * 弹窗动态加载开始回调\n//      * @example\n//      * PopupManager.loadStartCallback = () => {\n//      *     LoadingTip.show();\n//      * };\n//      */\n//     public static loadStartCallback: () => void = null;\n// \n//     /**\n//      * 弹窗动态加载结束回调\n//      * @example\n//      * PopupManager.loadFinishCallback = () => {\n//      *     LoadingTip.hide();\n//      * };\n//      */\n//     public static loadFinishCallback: () => void = null;\n// \n//     /**\n//      * 展示弹窗，如果当前已有弹窗在展示中则加入等待队列\n//      * @param path 弹窗预制体相对路径（如：prefabs/MyPopup）\n//      * @param options 弹窗选项（将传递给弹窗的组件）\n//      * @param params 弹窗展示参数\n//      * @example\n//      * const options = {\n//      *     title: 'Hello',\n//      *     content: 'This is a popup!'\n//      * };\n//      * const params = {\n//      *     mode: PopupCacheMode.Normal\n//      * };\n//      * PopupManager.show('prefabs/MyPopup', options, params);\n//      */\n//     public static show<Options>(path: string, options?: Options, params?: PopupParamsType): Promise<ShowResultType> {\n//         return new Promise(async res => {\n//             // 解析处理参数\n//             params = this.parseParams(params);\n//             // 当前已有弹窗在展示中则加入等待队列\n//             if (this._current || this.locked) {\n//                 // 是否立即强制展示\n//                 if (params && params.immediately) {\n//                     this.locked = false;\n//                     // 挂起当前弹窗\n//                     await this.suspend();\n//                 } else {\n//                     // 将请求推入等待队列\n//                     this.push(path, options, params);\n//                     res(ShowResultType.Waiting);\n//                     return;\n//                 }\n//             }\n//             // 保存为当前弹窗，阻止新的弹窗请求\n//             this._current = { path, options, params };\n//             // 先在缓存中获取弹窗节点\n//             let node = this.getNodeFromCache(path);\n//             // 缓存中没有，动态加载预制体资源\n//             if (!cc.isValid(node)) {\n//                 // 开始回调\n//                 this.loadStartCallback && this.loadStartCallback();\n//                 // 等待加载\n//                 const prefab = await this.load(path);\n//                 // 完成回调\n//                 this.loadFinishCallback && this.loadFinishCallback();\n//                 // 加载失败（一般是路径错误导致的）\n//                 if (!cc.isValid(prefab)) {\n//                     cc.warn('[PopupManager]', '弹窗加载失败', path);\n//                     this._current = null;\n//                     res(ShowResultType.Failed);\n//                     return;\n//                 }\n//                 // 实例化节点\n//                 node = cc.instantiate(prefab);\n//             }\n//             // 获取继承自 PopupBase 的弹窗组件\n//             const popup = node.getComponent(PopupBase);\n//             if (!popup) {\n//                 cc.warn('[PopupManager]', '未找到弹窗组件', path);\n//                 this._current = null;\n//                 res(ShowResultType.Failed);\n//                 return;\n//             }\n//             // 保存组件引用\n//             this._current.popup = popup;\n//             // 保存节点引用\n//             this._current.node = node;\n//             // 添加到场景中\n//             node.setParent(this.container);\n//             // 显示在最上层\n//             node.setSiblingIndex(cc.macro.MAX_ZINDEX);\n//             // 设置完成回调\n//             // @ts-ignore\n//             popup.finishCallback = async (suspended: boolean) => {\n//                 if (suspended) {\n//                     return;\n//                 }\n//                 // 是否需要锁定\n//                 this.locked = (this._suspended.length > 0 || this._queue.length > 0);\n//                 // 回收\n//                 this.recycle(path, node, params.mode);\n//                 this._current = null;\n//                 res(ShowResultType.Done);\n//                 // 延迟一会儿\n//                 await new Promise(_res => {\n//                     cc.Canvas.instance.scheduleOnce(_res, this.interval);\n//                 });\n//                 // 下一个弹窗\n//                 this.next();\n//             }\n//             // 展示\n//             popup.show(options);\n//         });\n//     }\n// \n//     /**\n//      * 隐藏当前弹窗\n//      */\n//     public static hide() {\n//         if (cc.isValid(this._current.popup)) {\n//             this._current.popup.hide();\n//         }\n//     }\n// \n//     /**\n//      * 从缓存中获取节点\n//      * @param path 弹窗路径\n//      */\n//     private static getNodeFromCache(path: string): cc.Node {\n//         // 从节点缓存中获取\n//         const nodeCache = this._nodeCache;\n//         if (nodeCache.has(path)) {\n//             const node = nodeCache.get(path);\n//             if (cc.isValid(node)) {\n//                 return node;\n//             }\n//             // 删除无效引用\n//             nodeCache.delete(path);\n//         }\n//         // 从预制体缓存中获取\n//         const prefabCache = this._prefabCache;\n//         if (prefabCache.has(path)) {\n//             const prefab = prefabCache.get(path);\n//             if (cc.isValid(prefab)) {\n//                 // 增加引用计数\n//                 prefab.addRef();\n//                 // 实例化并返回\n//                 return cc.instantiate(prefab);\n//             }\n//             // 删除无效引用\n//             prefabCache.delete(path);\n//         }\n//         // 无\n//         return null;\n//     }\n// \n//     /**\n//      * 展示挂起或等待队列中的下一个弹窗\n//      */\n//     private static next() {\n//         if (this._current || (this._suspended.length === 0 && this._queue.length === 0)) {\n//             return;\n//         }\n//         // 取出一个请求\n//         let request: PopupRequestType = null;\n//         if (this._suspended.length > 0) {\n//             // 挂起队列\n//             request = this._suspended.shift();\n//         } else {\n//             // 等待队列\n//             request = this._queue.shift();\n//         }\n//         // 解除锁定\n//         this.locked = false;\n//         // 已有实例\n//         if (cc.isValid(request.popup)) {\n//             // 设为当前弹窗\n//             this._current = request;\n//             // 直接展示\n//             request.node.setParent(this.container);\n//             request.popup.show(request.options);\n//             return;\n//         }\n//         // 加载并展示\n//         this.show(request.path, request.options, request.params);\n//     }\n// \n//     /**\n//      * 添加一个弹窗请求到等待队列中，如果当前没有展示中的弹窗则直接展示该弹窗。\n//      * @param path 弹窗预制体相对路径（如：prefabs/MyPopup）\n//      * @param options 弹窗选项\n//      * @param params 弹窗展示参数\n//      */\n//     private static push<Options>(path: string, options?: Options, params?: PopupParamsType) {\n//         // 直接展示\n//         if (!this._current && !this.locked) {\n//             this.show(path, options, params);\n//             return;\n//         }\n//         // 加入队列\n//         this._queue.push({ path, options, params });\n//         // 按照优先级从小到大排序\n//         this._queue.sort((a, b) => (a.params.priority - b.params.priority));\n//     }\n// \n//     /**\n//      * 挂起当前展示中的弹窗\n//      */\n//     private static async suspend() {\n//         if (!this._current) {\n//             return;\n//         }\n//         const request = this._current;\n//         // 将当前弹窗推入挂起队列\n//         this._suspended.push(request);\n//         // @ts-ignore\n//         await request.popup.onSuspended();\n//         // 关闭当前弹窗（挂起）\n//         await request.popup.hide(true);\n//         // 置空当前\n//         this._current = null;\n//     }\n// \n//     /**\n//      * 回收弹窗\n//      * @param path 弹窗路径\n//      * @param node 弹窗节点\n//      * @param mode 缓存模式\n//      */\n//     private static recycle(path: string, node: cc.Node, mode: CacheMode) {\n//         switch (mode) {\n//             // 一次性\n//             case CacheMode.Once: {\n//                 this._nodeCache.delete(path);\n//                 node.destroy();\n//                 // 释放\n//                 this.release(path);\n//                 break;\n//             }\n//             // 正常\n//             case CacheMode.Normal: {\n//                 this._nodeCache.delete(path);\n//                 node.destroy();\n//                 break;\n//             }\n//             // 频繁\n//             case CacheMode.Frequent: {\n//                 node.removeFromParent(false);\n//                 this._nodeCache.set(path, node);\n//                 break;\n//             }\n//         }\n//     }\n// \n//     /**\n//      * 加载并缓存弹窗预制体资源\n//      * @param path 弹窗路径\n//      */\n//     public static load(path: string): Promise<cc.Prefab> {\n//         return new Promise(res => {\n//             const prefabMap = this._prefabCache;\n//             // 先看下缓存里有没有，避免重复加载\n//             if (prefabMap.has(path)) {\n//                 const prefab = prefabMap.get(path);\n//                 // 缓存是否有效\n//                 if (cc.isValid(prefab)) {\n//                     res(prefab);\n//                     return;\n//                 } else {\n//                     // 删除无效引用\n//                     prefabMap.delete(path);\n//                 }\n//             }\n//             // 动态加载\n//             cc.resources.load(path, (error: Error, prefab: cc.Prefab) => {\n//                 if (error) {\n//                     res(null);\n//                     return;\n//                 }\n//                 // 缓存预制体\n//                 prefabMap.set(path, prefab);\n//                 // 返回\n//                 res(prefab);\n//             });\n//         });\n//     }\n// \n//     /**\n//      * 尝试释放弹窗资源（注意：弹窗内部动态加载的资源请自行释放）\n//      * @param path 弹窗路径\n//      */\n//     public static release(path: string) {\n//         // 移除节点\n//         const nodeCache = this._nodeCache;\n//         let node = nodeCache.get(path);\n//         if (node) {\n//             nodeCache.delete(path);\n//             if (cc.isValid(node)) {\n//                 node.destroy();\n//             }\n//             node = null;\n//         }\n//         // 移除预制体\n//         const prefabCache = this._prefabCache;\n//         let prefab = prefabCache.get(path);\n//         if (prefab) {\n//             // 删除缓存\n//             if (prefab.refCount <= 1) {\n//                 prefabCache.delete(path);\n//             }\n//             // 减少引用\n//             prefab.decRef();\n//             prefab = null;\n//         }\n//     }\n// \n//     /**\n//      * 解析参数\n//      * @param params 参数\n//      */\n//     private static parseParams(params: PopupParamsType) {\n//         if (params == undefined) {\n//             return new PopupParamsType();\n//         }\n//         // 是否为对象\n//         if (Object.prototype.toString.call(params) !== '[object Object]') {\n//             cc.warn('[PopupManager]', '弹窗参数无效，使用默认参数');\n//             return new PopupParamsType();\n//         }\n//         // 缓存模式\n//         if (params.mode == undefined) {\n//             params.mode = CacheMode.Normal;\n//         }\n//         // 优先级\n//         if (params.priority == undefined) {\n//             params.priority = 0;\n//         }\n//         // 立刻展示\n//         if (params.immediately == undefined) {\n//             params.immediately = false;\n//         }\n//         return params;\n//     }\n// \n// }\n// \n// /**\n//  * 弹窗展示参数类型\n//  */\n// class PopupParamsType {\n//     /** 缓存模式 */\n//     mode?: CacheMode = CacheMode.Normal;\n//     /** 优先级（优先级大的优先展示） */\n//     priority?: number = 0;\n//     /** 立刻展示（将会挂起当前展示中的弹窗） */\n//     immediately?: boolean = false;\n// }\n// \n// /**\n//  * 弹窗展示请求类型\n//  */\n// class PopupRequestType {\n//     /** 弹窗预制体相对路径 */\n//     path: string;\n//     /** 弹窗选项 */\n//     options: any;\n//     /** 缓存模式 */\n//     params: PopupParamsType;\n//     /** 弹窗组件 */\n//     popup?: PopupBase;\n//     /** 弹窗节点 */\n//     node?: cc.Node;\n// }\n"]}