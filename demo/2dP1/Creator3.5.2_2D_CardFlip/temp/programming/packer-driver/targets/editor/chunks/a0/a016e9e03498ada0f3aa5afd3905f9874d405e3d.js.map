{"version":3,"sources":["file:///Users/mu/work/gitee/CocosCreatorDemos/demo/2dP1/Creator3.5.2_2D_CardFlip/assets/scripts/TweenUtil.ts"],"names":["TweenUtil","tween","Vec3","flip","node","duration","round","onMiddle","onComplete","Promise","res","time","t","x","z","eulerAngles","by","easing","call","start"],"mappings":";;;8BAOqBA,S;;;;;;;AADMC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,I,OAAAA,I;;;;;;;yBACbF,S,GAAN,MAAMA,SAAN,CAAgB;AAC3B;AACJ;AACA;AACA;AACA;AACA;AACA;AACsB,eAAJG,IAAI,CAACC,IAAD,EAAaC,QAAb,EAA+BC,KAAa,GAAG,CAA/C,EAAkDC,QAAlD,EAAuEC,UAAvE,EAA6G;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,iBAAO,IAAIC,OAAJ,CAAkBC,GAAG,IAAI;AAC5B,kBAAMC,IAAI,GAAG,IAAIL,KAAjB;AAAA,kBACAM,CAAC,GAAGX,KADJ;AAAA,kBAEA;AAAEY,cAAAA,CAAF;AAAKC,cAAAA;AAAL,gBAAWV,IAAI,CAACW,WAFhB;AAAA,kBAGAA,WAAW,GAAG,IAAIb,IAAJ,CAASW,CAAT,EAAY,MAAMP,KAAlB,EAAyBQ,CAAzB,CAHd;AAIAF,YAAAA,CAAC,CAACR,IAAD,CAAD,CACKY,EADL,CACQL,IADR,EACc;AAAEI,cAAAA;AAAF,aADd,EAC+B;AAAEE,cAAAA,MAAM,EAAE;AAAV,aAD/B,EAEKC,IAFL,CAEUR,GAFV,EAGKS,KAHL;AAIH,WATM,CAAP;AAUH;;AA3C0B,O","sourcesContent":["/**\n* Tween 工具\n* @author 陈皮皮 (ifaswind)\n* @version 20210320\n*/\n\nimport { _decorator, Node, tween, Vec3 } from 'cc';\nexport default class TweenUtil {\n    /**\n    * 水平翻转（卡片翻转）\n    * @param node 节点\n    * @param duration 总时长\n    * @param onMiddle 中间状态回调\n    * @param onComplete 完成回调\n    */\n    public static flip(node: Node, duration: number, round: number = 1, onMiddle?: Function, onComplete?: Function): Promise<void> {\n        // return new Promise<void>(res => {\n        //     const t = tween,\n        //     time = duration / 2,\n        //     scale = node.scale,\n        //     skewY = scale.x > 0 ? 20 : -20;\n        //     t(node)\n        //         .parallel(\n        //             t(node).to(time, { scale: new Vec3(0, scale.y, scale.z) }, { easing: 'quadIn' }),\n        //             // t(node).to(time, { skewY: -skewY }, { easing: 'quadOut' }),\n        //         )\n        //         .call(() => {\n        //             onMiddle && onMiddle();\n        //         })\n        //         .parallel(\n        //             t(node).to(time, { scale: new Vec3(-scale.x, scale.y, scale.z) }, { easing: 'quadOut' }),\n        //             // t(node).to(time, { skewY: 0 }, { easing: 'quadIn' }),\n        //         )\n        //         .call(() => {\n        //             onComplete && onComplete();\n        //             res();\n        //         })\n        //         .start();\n        // });\n\n        return new Promise<void>(res => {\n            const time = 1 * round,\n            t = tween,\n            { x, z } = node.eulerAngles,\n            eulerAngles = new Vec3(x, 360 * round, z);\n            t(node)\n                .by(time, { eulerAngles }, { easing: 'quadOut' })\n                .call(res)\n                .start();\n        });\n    }\n}\n"]}