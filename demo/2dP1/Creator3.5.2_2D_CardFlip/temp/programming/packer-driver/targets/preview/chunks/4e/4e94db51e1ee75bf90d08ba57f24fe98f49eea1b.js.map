{"version":3,"sources":["file:///Users/mu/work/gitee/CocosCreatorDemos/demo/2dP1/Creator3.5.2_2D_CardFlip/assets/scripts/EventManager.ts"],"names":["EventManager","on","name","callback","target","events","has","set","get","push","once","onceEvents","off","event","i","l","length","compare","splice","delete","onceEvent","emit","args","apply","remove","removeAll","clear","subscription","inCallback","inTarget","toString","Map"],"mappings":";;;iBAgBqBA,Y;;;;;;;;;;;;;yBAAAA,Y,GAAN,MAAMA,YAAN,CAAmB;AAC9B;AACJ;AACA;;AAEI;AACJ;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACoB,eAAFC,EAAE,CAACC,IAAD,EAAeC,QAAf,EAAmCC,MAAnC,EAAiD;AAC7D,cAAMC,MAAM,GAAG,KAAKA,MAApB;;AACA,cAAI,CAACA,MAAM,CAACC,GAAP,CAAWJ,IAAX,CAAL,EAAuB;AACvBG,YAAAA,MAAM,CAACE,GAAP,CAAWL,IAAX,EAAiB,CAAC;AAAEC,cAAAA,QAAF;AAAYC,cAAAA;AAAZ,aAAD,CAAjB;AACA;AACC;;AACDC,UAAAA,MAAM,CAACG,GAAP,CAAWN,IAAX,EAAiBO,IAAjB,CAAsB;AAAEN,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,WAAtB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACsB,eAAJM,IAAI,CAACR,IAAD,EAAeC,QAAf,EAAmCC,MAAnC,EAAiD;AAC/D,cAAMC,MAAM,GAAG,KAAKM,UAApB;;AACA,cAAI,CAACN,MAAM,CAACC,GAAP,CAAWJ,IAAX,CAAL,EAAuB;AACvBG,YAAAA,MAAM,CAACE,GAAP,CAAWL,IAAX,EAAiB,CAAC;AAAEC,cAAAA,QAAF;AAAYC,cAAAA;AAAZ,aAAD,CAAjB;AACA;AACC;;AACDC,UAAAA,MAAM,CAACG,GAAP,CAAWN,IAAX,EAAiBO,IAAjB,CAAsB;AAAEN,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,WAAtB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACqB,eAAHQ,GAAG,CAACV,IAAD,EAAeC,QAAf,EAAmCC,MAAnC,EAAiD;AAC9D;AACA,cAAMS,KAAK,GAAG,KAAKR,MAAL,CAAYG,GAAZ,CAAgBN,IAAhB,CAAd;;AACA,cAAIW,KAAJ,EAAW;AACP,iBAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,kBAAI,KAAKG,OAAL,CAAaJ,KAAK,CAACC,CAAD,CAAlB,EAAuBX,QAAvB,EAAiCC,MAAjC,CAAJ,EAA8C;AAC1CS,gBAAAA,KAAK,CAACK,MAAN,CAAaJ,CAAb,EAAgB,CAAhB;;AACA,oBAAID,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACpB,uBAAKX,MAAL,CAAYc,MAAZ,CAAmBjB,IAAnB;AACH;;AACD;AACH;AACJ;AACJ,WAb6D,CAc9D;;;AACA,cAAMkB,SAAS,GAAG,KAAKT,UAAL,CAAgBH,GAAhB,CAAoBN,IAApB,CAAlB;;AACA,cAAIkB,SAAJ,EAAe;AACX,iBAAK,IAAIN,EAAC,GAAG,CAAR,EAAWC,EAAC,GAAGK,SAAS,CAACJ,MAA9B,EAAsCF,EAAC,GAAGC,EAA1C,EAA6CD,EAAC,EAA9C,EAAkD;AAC9C,kBAAI,KAAKG,OAAL,CAAaG,SAAS,CAACN,EAAD,CAAtB,EAA2BX,QAA3B,EAAqCC,MAArC,CAAJ,EAAkD;AAC9CgB,gBAAAA,SAAS,CAACF,MAAV,CAAiBJ,EAAjB,EAAoB,CAApB;;AACA,oBAAIM,SAAS,CAACJ,MAAV,KAAqB,CAAzB,EAA4B;AACxB,uBAAKL,UAAL,CAAgBQ,MAAhB,CAAuBjB,IAAvB;AACH;;AACD;AACH;AACJ;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACsB,eAAJmB,IAAI,CAACnB,IAAD,EAA+B;AAC7C;AACA,cAAMW,KAAK,GAAG,KAAKR,MAAL,CAAYG,GAAZ,CAAgBN,IAAhB,CAAd;;AAF6C,4CAAboB,IAAa;AAAbA,YAAAA,IAAa;AAAA;;AAG7C,cAAIT,KAAJ,EAAW;AACP,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACG,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACnC,kBAAM;AAAEX,gBAAAA,QAAF;AAAYC,gBAAAA;AAAZ,kBAAuBS,KAAK,CAACC,CAAD,CAAlC;AACAX,cAAAA,QAAQ,CAACoB,KAAT,CAAenB,MAAf,EAAuBkB,IAAvB;AACH;AACJ,WAR4C,CAS7C;;;AACA,cAAMF,SAAS,GAAG,KAAKT,UAAL,CAAgBH,GAAhB,CAAoBN,IAApB,CAAlB;;AACA,cAAIkB,SAAJ,EAAe;AACX,iBAAK,IAAIN,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGM,SAAS,CAACJ,MAA9B,EAAsCF,GAAC,EAAvC,EAA2C;AACvC,kBAAM;AAAEX,gBAAAA,QAAQ,EAARA,SAAF;AAAYC,gBAAAA,MAAM,EAANA;AAAZ,kBAAuBgB,SAAS,CAACN,GAAD,CAAtC;;AACAX,cAAAA,SAAQ,CAACoB,KAAT,CAAenB,OAAf,EAAuBkB,IAAvB;AACH;;AACD,iBAAKX,UAAL,CAAgBQ,MAAhB,CAAuBjB,IAAvB;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACwB,eAANsB,MAAM,CAACtB,IAAD,EAAe;AAC/B;AACA,cAAI,KAAKG,MAAL,CAAYC,GAAZ,CAAgBJ,IAAhB,CAAJ,EAA2B;AACvB,iBAAKG,MAAL,CAAYc,MAAZ,CAAmBjB,IAAnB;AACH,WAJ8B,CAK/B;;;AACA,cAAI,KAAKS,UAAL,CAAgBL,GAAhB,CAAoBJ,IAApB,CAAJ,EAA+B;AAC3B,iBAAKS,UAAL,CAAgBQ,MAAhB,CAAuBjB,IAAvB;AACH;AACJ;AAED;AACJ;AACA;;;AAC2B,eAATuB,SAAS,GAAG;AACtB;AACA,eAAKpB,MAAL,CAAYqB,KAAZ,GAFsB,CAGtB;;AACA,eAAKf,UAAL,CAAgBe,KAAhB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAC0B,eAAPT,OAAO,CAACU,YAAD,EAA6BC,UAA7B,EAAmDC,QAAnD,EAAkE;AACpF,cAAM;AAAE1B,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,cAAuBuB,YAA7B;AACA,iBAAOvB,MAAM,KAAKyB,QAAX,KAAwB1B,QAAQ,KAAKyB,UAAb,IAA2BzB,QAAQ,CAAC2B,QAAT,OAAwBF,UAAU,CAACE,QAAX,EAA3E,CAAP;AACH;;AAjI6B,O;;AAAb9B,MAAAA,Y,CAIFK,M,GAAsC,IAAI0B,GAAJ,E;AAJpC/B,MAAAA,Y,CAQFW,U,GAA0C,IAAIoB,GAAJ,E","sourcesContent":["/**\n* 事件管理器\n* @version 20210421\n* @example\n* // 注册事件\n* EventManager.on('game-start', this.onGameStart, this);\n* // 发射事件\n* EventManager.emit('game-start', 666);\n*/\n\nimport { _decorator } from 'cc';\ninterface Subscription {\n    callback: Function;\n    target: any;\n}\n\nexport default class EventManager {\n    /**\n    * 普通事件容器\n    */\n    private static events: Map<string, Subscription[]> = new Map<string, Subscription[]>();\n    /**\n    * 一次性事件容器\n    */\n    private static onceEvents: Map<string, Subscription[]> = new Map<string, Subscription[]>();\n    /**\n    * 注册事件\n    * @param name 事件名\n    * @param callback 回调\n    * @param target 目标\n    */\n    public static on(name: string, callback: Function, target?: any) {\n        const events = this.events;\n        if (!events.has(name)) {\n        events.set(name, [{ callback, target }]);\n        return;\n        }\n        events.get(name).push({ callback, target });\n    }\n    /**\n    * 注册事件（一次性）\n    * @param name 事件名\n    * @param callback 回调\n    * @param target 目标\n    */\n    public static once(name: string, callback: Function, target?: any) {\n        const events = this.onceEvents;\n        if (!events.has(name)) {\n        events.set(name, [{ callback, target }]);\n        return;\n        }\n        events.get(name).push({ callback, target });\n    }\n    /**\n    * 取消注册事件\n    * @param name 事件名\n    * @param callback 回调\n    * @param target 目标\n    */\n    public static off(name: string, callback: Function, target?: any) {\n        // 普通事件\n        const event = this.events.get(name);\n        if (event) {\n            for (let i = 0, l = event.length; i < l; i++) {\n                if (this.compare(event[i], callback, target)) {\n                    event.splice(i, 1);\n                    if (event.length === 0) {\n                        this.events.delete(name);\n                    }\n                    break;\n                }\n            }\n        }\n        // 一次性事件\n        const onceEvent = this.onceEvents.get(name);\n        if (onceEvent) {\n            for (let i = 0, l = onceEvent.length; i < l; i++) {\n                if (this.compare(onceEvent[i], callback, target)) {\n                    onceEvent.splice(i, 1);\n                    if (onceEvent.length === 0) {\n                        this.onceEvents.delete(name);\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    /**\n    * 通过事件名发送事件\n    * @param name 事件名\n    * @param args 参数\n    */\n    public static emit(name: string, ...args: any[]) {\n        // 普通事件\n        const event = this.events.get(name);\n        if (event) {\n            for (let i = 0; i < event.length; i++) {\n                const { callback, target } = event[i];\n                callback.apply(target, args);\n            }\n        }\n        // 一次性事件\n        const onceEvent = this.onceEvents.get(name);\n        if (onceEvent) {\n            for (let i = 0; i < onceEvent.length; i++) {\n                const { callback, target } = onceEvent[i];\n                callback.apply(target, args);\n            }\n            this.onceEvents.delete(name);\n        }\n    }\n    /**\n    * 移除指定事件\n    * @param name 事件名\n    */\n    public static remove(name: string) {\n        // 普通事件\n        if (this.events.has(name)) {\n            this.events.delete(name);\n        }\n        // 一次性事件\n        if (this.onceEvents.has(name)) {\n            this.onceEvents.delete(name);\n        }\n    }\n\n    /**\n    * 移除所有事件\n    */\n    public static removeAll() {\n        // 普通事件\n        this.events.clear();\n        // 一次性事件\n        this.onceEvents.clear();\n    }\n\n    /**\n    * 对比\n    * @param subscription 订阅\n    * @param inCallback 回调\n    * @param inTarget 目标\n    */\n    private static compare(subscription: Subscription, inCallback: Function, inTarget: any) {\n        const { callback, target } = subscription;\n        return target === inTarget && (callback === inCallback || callback.toString() === inCallback.toString());\n    }\n}"]}