{"version":3,"sources":["file:///Users/mu/work/gitee/CocosCreatorDemos/demo/2dP1/Creator3.5.2_2D_CardFlip/assets/scripts/TweenUtil.ts"],"names":["TweenUtil","flip","node","duration","onMiddle","onComplete","Promise","res","tween","time","scaleX","scale","skewY","parallel","to","easing","call","start"],"mappings":";;;iBAQqBA,S;;;;;;;;;;;;;yBAAAA,S,GAAN,MAAMA,SAAN,CAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACsB,eAAJC,IAAI,CAACC,IAAD,EAAaC,QAAb,EAA+BC,QAA/B,EAAoDC,UAApD,EAA0F;AACxG,iBAAO,IAAIC,OAAJ,CAAkBC,GAAG,IAAI;AAChC,gBAAMC,KAAK,GAAGA,KAAd;AAAA,gBACAC,IAAI,GAAGN,QAAQ,GAAG,CADlB;AAAA,gBAEAO,MAAM,GAAGR,IAAI,CAACS,KAFd;AAAA,gBAGAC,KAAK,GAAGF,MAAM,GAAG,CAAT,GAAa,EAAb,GAAkB,CAAC,EAH3B;AAIAF,YAAAA,KAAK,CAACN,IAAD,CAAL,CACCW,QADD,CAEAL,KAAK,GAAGM,EAAR,CAAWL,IAAX,EAAiB;AAAEC,cAAAA,MAAM,EAAE;AAAV,aAAjB,EAAgC;AAAEK,cAAAA,MAAM,EAAE;AAAV,aAAhC,CAFA,EAGAP,KAAK,GAAGM,EAAR,CAAWL,IAAX,EAAiB;AAAEG,cAAAA,KAAK,EAAE,CAACA;AAAV,aAAjB,EAAoC;AAAEG,cAAAA,MAAM,EAAE;AAAV,aAApC,CAHA,EAKCC,IALD,CAKM,MAAM;AACZZ,cAAAA,QAAQ,IAAIA,QAAQ,EAApB;AACC,aAPD,EAQCS,QARD,CASAL,KAAK,GAAGM,EAAR,CAAWL,IAAX,EAAiB;AAAEC,cAAAA,MAAM,EAAE,CAACA;AAAX,aAAjB,EAAsC;AAAEK,cAAAA,MAAM,EAAE;AAAV,aAAtC,CATA,EAUAP,KAAK,GAAGM,EAAR,CAAWL,IAAX,EAAiB;AAAEG,cAAAA,KAAK,EAAE;AAAT,aAAjB,EAA+B;AAAEG,cAAAA,MAAM,EAAE;AAAV,aAA/B,CAVA,EAYCC,IAZD,CAYM,MAAM;AACZX,cAAAA,UAAU,IAAIA,UAAU,EAAxB;AACAE,cAAAA,GAAG;AACF,aAfD,EAgBCU,KAhBD;AAiBC,WAtBM,CAAP;AAuBH;;AAhC0B,O","sourcesContent":["// /**\n// * Tween 工具\n// * @author 陈皮皮 (ifaswind)\n// * @version 20210320\n// * @see TweenUtil.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/utils/TweenUtil.ts\n// */\n\nimport { _decorator, Node } from 'cc';\nexport default class TweenUtil {\n// /**\n// * 水平翻转（卡片翻转）\n// * @param node 节点\n// * @param duration 总时长\n// * @param onMiddle 中间状态回调\n// * @param onComplete 完成回调\n// */\n    public static flip(node: Node, duration: number, onMiddle?: Function, onComplete?: Function): Promise<void> {\n        return new Promise<void>(res => {\n        const tween = tween,\n        time = duration / 2,\n        scaleX = node.scale,\n        skewY = scaleX > 0 ? 20 : -20;\n        tween(node)\n        .parallel(\n        tween().to(time, { scaleX: 0 }, { easing: 'quadIn' }),\n        tween().to(time, { skewY: -skewY }, { easing: 'quadOut' }),\n        )\n        .call(() => {\n        onMiddle && onMiddle();\n        })\n        .parallel(\n        tween().to(time, { scaleX: -scaleX }, { easing: 'quadOut' }),\n        tween().to(time, { skewY: 0 }, { easing: 'quadIn' }),\n        )\n        .call(() => {\n        onComplete && onComplete();\n        res();\n        })\n        .start();\n        });\n    }\n}\n"]}