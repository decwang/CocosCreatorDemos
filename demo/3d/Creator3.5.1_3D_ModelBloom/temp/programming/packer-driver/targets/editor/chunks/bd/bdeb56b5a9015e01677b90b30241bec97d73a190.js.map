{"version":3,"sources":["file:///Users/mu/Desktop/Creator3.5.1_3D_ModelBloom/assets/scripts/stage/PPBlurYStage.ts"],"names":["_decorator","Vec2","Material","PPBaseStage","ccclass","PPBlurYStage","constructor","_name","initWithStageDesc","mgr","pl","outputTexName","originMat","mat","copy","tex","getFrameBuffer","texSize","colorTextures","x","width","y","height","bindShaderParamsTexture","setOutputFramebuffer","bindShaderParamsVec2"],"mappings":";;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAA4BC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,Q,OAAAA,Q;;AAClCC,MAAAA,W,iBAAAA,W;;;;;;;OAEH;AAAEC,QAAAA;AAAF,O,GAAcJ,U;;8BAGPK,Y,WADZD,OAAO,CAAC,cAAD,C,gBAAR,MACaC,YADb;AAAA;AAAA,sCAC8C;AAE1CC,QAAAA,WAAW,GAAG;AACV;AACA,eAAKC,KAAL,GAAa,cAAb;AACH;;AAEMC,QAAAA,iBAAiB,CAACC,GAAD,EAAaC,EAAb,EAAiC;AACrD,eAAKC,aAAL,GAAqB,SAArB;AAEA,gBAAMC,SAAS,GAAG,KAAKC,GAAvB;;AACA,cAAID,SAAJ,EAAe;AACX,iBAAKC,GAAL,GAAW,IAAIX,QAAJ,EAAX;AACA,iBAAKW,GAAL,CAASC,IAAT,CAAcF,SAAd;AACH;;AACD,gBAAMG,GAAG,GAAGN,GAAG,CAACO,cAAJ,CAAmB,WAAnB,CAAZ;AACA,gBAAMC,OAAO,GAAG,IAAIhB,IAAJ,CAAS,CAAT,EAAY,CAAZ,CAAhB;;AACA,cAAIc,GAAG,IAAIA,GAAG,CAACG,aAAJ,CAAkB,CAAlB,CAAX,EAAiC;AAC7BD,YAAAA,OAAO,CAACE,CAAR,GAAYJ,GAAG,CAACG,aAAJ,CAAkB,CAAlB,EAAqBE,KAAjC;AACAH,YAAAA,OAAO,CAACI,CAAR,GAAYN,GAAG,CAACG,aAAJ,CAAkB,CAAlB,EAAqBI,MAAjC;AACH;;AACD,eAAKC,uBAAL,CAA6Bd,GAA7B,EAAkC,SAAlC,EAA6C,UAA7C;AACA,eAAKe,oBAAL,CAA0Bf,GAA1B;AACA,eAAKgB,oBAAL,CAA0B,SAA1B,EAAqCR,OAArC;AACA,eAAKQ,oBAAL,CAA0B,WAA1B,EAAuC,IAAIxB,IAAJ,CAAS,CAAT,EAAY,CAAZ,CAAvC;AACH;;AAzByC,O","sourcesContent":["\r\nimport { _decorator, RenderPipeline, Vec2, Material } from 'cc';\r\nimport { PPBaseStage } from '../../postprocess/PPBaseStage';\r\nimport { PPMgr } from '../../postprocess/PPMgr';\r\nconst { ccclass } = _decorator;\r\n\r\n@ccclass('PPBlurYStage')\r\nexport class PPBlurYStage extends PPBaseStage {\r\n\r\n    constructor() {\r\n        super();\r\n        this._name = \"PPBlurYStage\";\r\n    }\r\n\r\n    public initWithStageDesc(mgr: PPMgr, pl: RenderPipeline) {\r\n        this.outputTexName = 'tempTex';\r\n\r\n        const originMat = this.mat;\r\n        if (originMat) {\r\n            this.mat = new Material();\r\n            this.mat.copy(originMat);\r\n        }\r\n        const tex = mgr.getFrameBuffer('screenTex');\r\n        const texSize = new Vec2(1, 1);\r\n        if (tex && tex.colorTextures[0]) {\r\n            texSize.x = tex.colorTextures[0].width;\r\n            texSize.y = tex.colorTextures[0].height;\r\n        }\r\n        this.bindShaderParamsTexture(mgr, 'tempTex', 'tempTex2');\r\n        this.setOutputFramebuffer(mgr);\r\n        this.bindShaderParamsVec2('texSize', texSize);\r\n        this.bindShaderParamsVec2('direction', new Vec2(0, 1));\r\n    }\r\n\r\n}\r\n"]}