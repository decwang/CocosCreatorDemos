{"version":3,"sources":["file:///Users/mu/work/gitee/CocosCreatorDemos/demo/3d/Creator3.5.1_3D_ModelBloom/assets/scripts/PPBaseStage.ts"],"names":["_decorator","gfx","pipeline","Material","RenderStage","PipelineStateManager","Camera","ccclass","property","colors","Color","PPBaseStage","constructor","_ia","_framebuffer","paramTexs","outputTexName","_name","ia","val","framebuffer","initWithStageDesc","mgr","pl","bindShaderParamsTexs","setOutputFramebuffer","bindShaderParamsVec2","name","value","pass","mat","passes","handle","getHandle","setUniform","forEach","fbName","bindShaderParamsTexture","fb","createFrameBufferIf","keyFBName","binding","getBinding","samper","bindTexture","colorTextures","bindSampler","activate","flow","update","render","camera","projectionType","ProjectionType","PERSPECTIVE","_pipeline","device","cmdBuff","commandBuffers","window","rp","renderPass","pipelineUBO","updateCameraUBO","renderArea","Rect","vp","viewport","x","width","y","height","pipelineSceneData","shadingScale","clearFlag","ClearFlagBit","COLOR","clearColor","z","w","beginRenderPass","clearDepth","clearStencil","bindDescriptorSet","SetIndex","GLOBAL","descriptorSet","shader","getShaderVariant","inputAssembler","pso","getOrCreatePipelineState","bindPipelineState","MATERIAL","bindInputAssembler","draw","endRenderPass","destroy"],"mappings":"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","sourcesContent":["\nimport { _decorator, renderer, gfx, pipeline, Material, RenderStage, PipelineStateManager, Camera, RenderPipeline, Vec2, RenderFlow } from 'cc';\nimport { PPMgr } from './PPMgr';\nconst { ccclass, property } = _decorator;\n\nconst colors: gfx.Color[] = [new gfx.Color(0, 0, 0, 1)];\n\n@ccclass('PPBaseStage')\nexport class PPBaseStage extends RenderStage {\n\n    @property (Material)\n    mat:    Material | null = null;\n\n    private _ia:  gfx.InputAssembler | null = null;\n    private _framebuffer: gfx.Framebuffer | null = null;\n\n    paramTexs: string[] = ['screenTex'];\n    outputTexName: string = '';\n\n    constructor() {\n        super();\n        this._name = \"PPBaseStage\";\n    }\n\n    get ia() {\n        return this._ia;\n    }\n    set ia(val) {\n        this._ia = val;\n    }\n\n    get framebuffer() {\n        return this._framebuffer;\n    }\n    set framebuffer(val) {\n        this._framebuffer = val;\n    }\n\n    public initWithStageDesc(mgr: PPMgr, pl: RenderPipeline) {\n        this.bindShaderParamsTexs(mgr);\n        this.setOutputFramebuffer(mgr);\n    }\n\n    protected bindShaderParamsVec2(name: string, value: Vec2) {\n        const pass = this.mat?.passes[0];\n        if (!pass) { return; }\n\n        const handle = pass.getHandle(name);\n        if (handle < 1) { return; }\n\n        pass.setUniform(handle, value)\n    }\n\n    protected bindShaderParamsTexs(mgr: PPMgr) {\n        this.paramTexs.forEach(fbName => {\n            this.bindShaderParamsTexture(mgr, fbName, fbName);\n        });\n    }\n\n    protected setOutputFramebuffer(mgr: PPMgr) {\n        if (!this.outputTexName) { return; }\n        const fb = mgr.createFrameBufferIf(this.outputTexName);\n        if (!fb) { return; }\n        this.framebuffer = fb;\n    }\n\n    protected bindShaderParamsTexture(mgr: PPMgr, fbName: string, keyFBName: string) {\n        const pass = this.mat?.passes[0];\n        if (!pass) { return; }\n\n        const binding = pass.getBinding(fbName);\n        if (binding < 0) { return; }\n\n        const fb = mgr.createFrameBufferIf(keyFBName);\n        if (!fb) { return; }\n        const samper = mgr.samper;\n        if (!samper) { return; }\n\n        pass.bindTexture(binding, fb.colorTextures[0]!);\n        pass.bindSampler(binding, samper);\n    }\n\n    public activate (pipeline: RenderPipeline, flow: RenderFlow) {\n        super.activate(pipeline, flow);\n        this.mat?.passes[0].update();\n    }\n\n    public render (camera: renderer.scene.Camera): void {\n        if (camera.projectionType != Camera.ProjectionType.PERSPECTIVE) { return; }\n        if (null == this.mat) { return; }\n        if (null == this._ia) { return; }\n\n        const pl = this._pipeline;\n        const device = pl.device;\n        const cmdBuff = pl.commandBuffers[0];\n        let fb = this.framebuffer ? this.framebuffer : camera.window?.framebuffer;\n        if (null == fb) { return; }\n        const rp = fb.renderPass;\n\n        pl.pipelineUBO.updateCameraUBO(camera);\n\n        const renderArea = new gfx.Rect(0, 0, 1, 1);\n        const vp = camera.viewport;\n        renderArea.x = vp.x * camera.width;\n        renderArea.y = vp.y * camera.height;\n        renderArea.width = vp.width * camera.width * pl.pipelineSceneData.shadingScale;\n        renderArea.height = vp.height * camera.height * pl.pipelineSceneData.shadingScale;\n\n        if (camera.clearFlag & gfx.ClearFlagBit.COLOR) {\n            colors[0].x = camera.clearColor.x;\n            colors[0].y = camera.clearColor.y;\n            colors[0].z = camera.clearColor.z;\n        }\n        colors[0].w = camera.clearColor.w;\n\n        cmdBuff.beginRenderPass(rp, fb, renderArea, colors, camera.clearDepth, camera.clearStencil);\n        cmdBuff.bindDescriptorSet(pipeline.SetIndex.GLOBAL, pl.descriptorSet);\n\n        const pass = this.mat!.passes[0];\n        const shader = this.mat!.passes[0].getShaderVariant();\n\n        let inputAssembler = this._ia;\n        let pso: gfx.PipelineState | null = null;\n        if (pass != null && shader != null && inputAssembler != null) {\n            pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, rp, inputAssembler);\n        }\n\n        if (pso != null) {\n            cmdBuff.bindPipelineState(pso);\n            cmdBuff.bindDescriptorSet(pipeline.SetIndex.MATERIAL, pass.descriptorSet);\n            cmdBuff.bindInputAssembler(inputAssembler);\n            cmdBuff.draw(inputAssembler);\n        }\n\n        cmdBuff.endRenderPass();\n    }\n\n    destroy() {\n    }\n\n}\n"]}