{"version":3,"sources":["file:///Users/mu/work/gitee/CocosCreatorDemos/demo/3d/Creator3.5.2_3D_Skybox/assets/src/NodeFloatingAnim.ts"],"names":["_decorator","Component","v3","ccclass","property","NodeFloatingAnim","_angles","_pos","_lifeTime","Math","random","start","node","eulerAngles","clone","getPosition","update","deltaTime","rotateSpeed","y","updownSpeed","sin","setPosition"],"mappings":";;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAuBC,MAAAA,E,OAAAA,E;;;;;;;OACtC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;kCAGjBK,gB,WADZF,OAAO,CAAC,kBAAD,C,2BAAR,MACaE,gBADb,SACsCJ,SADtC,CACgD;AAAA;AAAA;AAAA,eAOpCK,OAPoC,GAOrBJ,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAPmB;AAAA,eAQpCK,IARoC,GAQxBL,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CARsB;AAAA,eASpCM,SAToC,GASxBC,IAAI,CAACC,MAAL,EATwB;;AAAA;;AAAA;AAAA;;AAiB5CC,QAAAA,KAAK,GAAI;AACL;AACA,eAAKL,OAAL,GAAe,KAAKM,IAAL,CAAUC,WAAV,CAAsBC,KAAtB,EAAf;AACA,eAAKF,IAAL,CAAUG,WAAV,CAAsB,KAAKR,IAA3B;AACH;;AAEDS,QAAAA,MAAM,CAAEC,SAAF,EAAqB;AACtB,cAAG,KAAKC,WAAR,EAAoB;AACjB,iBAAKZ,OAAL,CAAaa,CAAb,IAAkBF,SAAS,GAAG,KAAKC,WAAnC;AACA,iBAAKN,IAAL,CAAUC,WAAV,GAAwB,KAAKP,OAA7B;AACF;;AAED,cAAG,KAAKc,WAAR,EAAoB;AACjB,iBAAKZ,SAAL,IAAkBS,SAAlB;AAEA,iBAAKL,IAAL,CAAUG,WAAV,CAAsB,KAAKR,IAA3B;AACA,iBAAKA,IAAL,CAAUY,CAAV,GAAcV,IAAI,CAACY,GAAL,CAAS,KAAKb,SAAL,GAAiB,KAAKY,WAA/B,CAAd;AACA,iBAAKR,IAAL,CAAUU,WAAV,CAAsB,KAAKf,IAA3B;AACF;AACL;;AApC2C,O,8EAW3CH,Q;;;;;iBACoB,E;;sFAEpBA,Q;;;;;iBACoB,C","sourcesContent":["import { _decorator, Component, Node, Vec3, v3, CameraComponent, Terrain } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('NodeFloatingAnim')\nexport class NodeFloatingAnim extends Component {\n    /* class member could be defined like this */\n    // dummy = '';\n\n    /* use `property` decorator if your want the member to be serializable */\n    // @property\n    // serializableDummy = 0;\n    private _angles:Vec3 = v3(0,0,0);\n    private _pos:Vec3 = v3(0,0,0);\n    private _lifeTime = Math.random();\n\n    @property\n    rotateSpeed:number = 10;\n\n    @property\n    updownSpeed:number = 1;\n\n    start () {\n        // Your initialization goes here.\n        this._angles = this.node.eulerAngles.clone();\n        this.node.getPosition(this._pos);\n    }\n\n    update (deltaTime: number) {\n         if(this.rotateSpeed){\n            this._angles.y += deltaTime * this.rotateSpeed;\n            this.node.eulerAngles = this._angles;\n         }\n\n         if(this.updownSpeed){\n            this._lifeTime += deltaTime;\n         \n            this.node.getPosition(this._pos);\n            this._pos.y = Math.sin(this._lifeTime * this.updownSpeed);\n            this.node.setPosition(this._pos);\n         }\n    }\n}\n"]}